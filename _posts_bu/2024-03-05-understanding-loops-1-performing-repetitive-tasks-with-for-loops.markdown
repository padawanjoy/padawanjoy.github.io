---
layout: post
title:  "반복문 이해하기 (1): for 반복문으로 반복 작업 수행하기"
date:   2024-03-05 22:54:00 +0900
author: padawanjoy
image:  '/images/posts/2024-03-05-understanding-loops-1-performing-repetitive-tasks-with-for-loops/01.webp'
tags:   [javascript, js-dev-course, loops, for-loops]
tags_color: '#db9e00'
featured: true
---
이번 글에서는 JavaScript의 핵심 구성 요소 중 하나인 '반복문'을 다루며, 특히 for 반복문에 집중하여 그 작동 방식과 반복 작업을 효율적으로 수행하는 방법을 살펴보겠습니다.

## 목차
1. [반복문이란?](#반복문이란)
2. [for 반복문의 기본 구조](#for-반복문의-기본-구조)
3. [for 반복문 예제](#for-반복문-예제)
4. [for 반복문의 다양한 사용법](#for-반복문의-다양한-사용법)
5. [실습: for 반복문으로 예제 만들기](#실습-for-반복문으로-예제-만들기)
6. [결론 및 다음 포스트 미리보기](#결론-및-다음-포스트-미리보기)

## 반복문이란?
반복문은 특정 조건이 만족될 때까지 코드 블록을 반복적으로 실행하는 프로그래밍 구조입니다. 이를 통해 동일한 작업을 여러 번 수행할 수 있어 코드의 재사용성과 효율성을 높일 수 있습니다.

## for 반복문의 기본 구조
**`for`** 반복문은 가장 일반적인 반복문 유형 중 하나로, 기본 구조는 다음과 같습니다:

```javascript
for (초기값; 조건; 증감) {
  // 반복적으로 실행될 코드
}
```

- 초기값: 반복문 실행 시 처음에 한 번만 실행됩니다.
- 조건: 각 반복 전에 평가되며, 참일 경우 코드 블록이 실행됩니다.
- 증감: 각 반복의 끝에 실행되어 반복문의 다음 단계로 넘어갑니다.

## for 반복문 예제
간단한 **`for`** 반복문 예제로 1부터 5까지의 숫자를 출력하는 방법을 살펴봅시다:

```javascript
for (let i = 1; i <= 5; i++) {
  console.log(i);
}
```

## for 반복문의 다양한 사용법
**`for`** 반복문은 배열의 요소를 순회하거나 특정 조건에 따라 다양한 작업을 수행하는 데 사용될 수 있습니다. 예를 들어, 배열의 모든 요소를 출력하고 싶다면 다음과 같이 작성할 수 있습니다:

```javascript
let fruits = ["Apple", "Banana", "Cherry"];
for (let i = 0; i < fruits.length; i++) {
  console.log(fruits[i]);
}
```

## 실습: for 반복문으로 예제 만들기
직접 **`for`** 반복문을 작성하여 실습해 보세요. 1부터 10까지의 짝수를 출력하는 코드를 만들어 보세요:

```javascript
for (let i = 1; i <= 10; i++) {
  if (i % 2 === 0) {
    console.log(i);
  }
}
```

## 결론 및 다음 포스트 미리보기
이번 포스트에서는 JavaScript에서 반복 작업을 수행하기 위해 **`for`** 반복문을 사용하는 방법을 배웠습니다. **`for`** 반복문은 JavaScript에서 가장 기본적이면서도 강력한 도구 중 하나입니다. 다음 포스트에서는 '반복문 이해하기 (2): 조건에 따른 반복을 위한 while 및 do-while 반복문 탐색하기'를 주제로 알아보겠습니다!