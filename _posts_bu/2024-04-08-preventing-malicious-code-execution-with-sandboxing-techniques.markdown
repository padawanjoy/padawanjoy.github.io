---
layout: post
title:  악의적인 코드 실행을 방지하기 위한 "샌드박싱 기법"이란?
date:   2024-04-08 10:37:00 +0900
author: padawanjoy
image:  '/images/posts/2024-04-08-preventing-malicious-code-execution-with-sandboxing-techniques/01.webp'
tags:   [sandboxing, security, malware-prevention]
# tags_color: '#db9e00'
featured: true
---
안녕하세요! 자바스크립트에 대한 연재 후, 어떤 글을 써보면 좋을지 고민을 하다가 '샌드박싱(Sandboxing)'에 대해 이야기해보려고 합니다. 샌드박싱이라는 이름에서도 떠오르지만, 어린 시절 가지고 놀았던 모래상자를 떠올리게 하는 용어인데요. 우리가 알아보려는 샌드박스도 실제 모래상자와 그리 다르지 않습니다. 안전하게 놀 수 있는 공간을 제공하며, 여러분의 중요한 데이터나 시스템을 위협으로부터 보호해 준다는 점에서 비슷한 성격을 가졌다고 할 수 있는데요. 지금부터 샌드박스 안에서 무엇을 할 수 있는지, 그리고 왜 중요한지 함께 알아보겠습니다!

## 목차
1. [샌드박싱이란 무엇인가?](#샌드박싱이란-무엇인가)
2. [샌드박싱의 주요 목적](#샌드박싱의-주요-목적)
3. [샌드박싱 기법의 활용 예시](#샌드박싱-기법의-활용-예시)
4. [Python으로 간단한 샌드박스 환경 만들기](#python으로-간단한-샌드박스-환경-만들기)
5. [샌드박싱의 한계와 주의사항](#샌드박싱의-한계와-주의사항)

## 샌드박싱이란 무엇인가?
우리가 어렸을 때 모래상자 안에서는 무엇이든 할 수 있었죠. 모래성을 쌓기도 하고, 모래로 무언가를 만들기도 했습니다. 샌드박싱도 비슷해요. 컴퓨터에서 프로그램이나 코드를 안전하게 실행할 수 있는 가상의 '모래상자'를 만들어 줍니다. 이 모래상자 안에서는 코드가 마음껏 뛰어놀 수 있지만, '밖'의 중요한 시스템이나 데이터에는 손상을 줄 수 없게 틀을 딱 만들어 줍니다.

모래상자 성격 그대로, 샌드박싱(Sandboxing) 기법은 소프트웨어, 프로그램, 프로세스, 또는 코드 실행을 엄격히 제한된 환경 내에서만 허용하여 시스템의 나머지 부분을 보호하는 보안 메커니즘입니다. 이 기법은 운영체제, 네트워크, 파일 시스템 등에 대한 접근을 제한함으로써 악의적인 코드가 시스템에 해를 끼치는 것을 방지합니다. 샌드박스 환경은 실제 환경을 모방할 수 있지만, 제한된 권한으로 실행되기 때문에 시스템의 나머지 부분에 영향을 미치지 않는 것이죠.

## 샌드박싱의 주요 목적
- **안전한 실행 환경 제공:** 알려지지 않은, 신뢰할 수 없는, 또는 테스트되지 않은 코드나 프로그램을 안전하게 실행할 수 있는 환경을 제공합니다.
- **보안 위협 방지**: 악성 소프트웨어, 바이러스, 웜 등이 호스트 시스템이나 네트워크에 피해를 주는 것을 방지합니다.
- **시스템 리소스 보호**: 샌드박스 내의 프로세스는 제한된 리소스만 사용할 수 있으며, 호스트 시스템의 리소스를 고갈시키는 것을 방지합니다.

## 샌드박싱 기법의 활용 예시
- **웹 브라우저**: 웹 브라우저는 각 탭이나 확장 프로그램을 별도의 샌드박스 프로세스로 실행하여, 악의적인 웹 페이지가 시스템 전체에 해를 끼치는 것을 방지합니다.
- **애플리케이션 테스트 및 개발**: 개발자는 새로운 프로그램이나 코드를 안전하게 테스트하기 위해 샌드박스 환경을 사용합니다.
- **이메일 첨부 파일 스캐닝**: 이메일 서비스는 첨부 파일을 샌드박스에서 열어 악성 코드가 포함되어 있는지 확인합니다.
- **클라우드 컴퓨팅**: 클라우드 서비스 제공업체는 멀티테넌시 환경에서 각 사용자의 데이터와 프로세스를 격리하기 위해 샌드박싱 기법을 사용합니다.

## Python으로 간단한 샌드박스 환경 만들기
샌드박싱 환경을 개발하는 방법은 여러 가지가 있으며, 사용하는 기술과 언어, 그리고 목표하는 보안 수준에 따라 달라집니다. 여기서는 Python을 사용하여 간단한 샌드박스 환경을 만드는 방법을 소개해보려고 하는데요. subprocess 모듈을 활용하여 제한된 환경에서 외부 스크립트를 실행하는 방법을 다뤄보겠습니다. 외부 스크립트가 제한된 리소스(예: CPU 시간, 메모리 사용량)를 사용하도록 하고, 특정 디렉토리에만 접근을 허용하도록 해보죠.

먼저, **`resource`** 모듈을 사용하여 프로세스 리소스 사용을 제한하고, **`subprocess`** 모듈을 사용하여 외부 스크립트를 안전하게 실행합니다. 이 방법은 Unix/Linux 환경에서 작동합니다.

```python
import subprocess
import os
import resource

def limit_resources():
    # 최대 CPU 시간을 1초로 제한
    resource.setrlimit(resource.RLIMIT_CPU, (1, 1))
    # 최대 생성 파일 크기를 0으로 설정하여 파일 쓰기 방지
    resource.setrlimit(resource.RLIMIT_FSIZE, (0, 0))

def run_script_in_sandbox(script_path):
    # 샌드박스 환경에서 스크립트 실행
    try:
        # preexec_fn는 자식 프로세스가 실행되기 전에 호출되는 함수
        subprocess.run(['python3', script_path], preexec_fn=limit_resources, timeout=5)
    except subprocess.TimeoutExpired:
        print("스크립트 실행 시간이 초과되었습니다.")
    except subprocess.CalledProcessError as e:
        print(f"스크립트 실행 중 오류 발생: {e}")
    except Exception as e:
        print(f"스크립트 실행 중 예외 발생: {e}")

# 실행할 스크립트 경로
script_path = 'path/to/your_script.py'
run_script_in_sandbox(script_path)
```

이 코드는 실행할 스크립트에 대한 CPU 시간과 파일 생성 크기에 제한을 둡니다. **`preexec_fn`** 옵션을 사용하여 자식 프로세스가 실행되기 전에 **`limit_resources`** 함수를 호출함으로써 이러한 제한을 적용합니다. 또한, **`timeout`** 파라미터를 사용하여 실행 시간을 제한할 수 있습니다.

### 참고!
- 이 방법은 Unix/Linux 시스템에서만 작동합니다. Windows에서는 다른 접근 방식이 필요할 수 있습니다.
- 실제로 안전한 샌드박스 환경을 구현하기 위해서는 더 많은 보안 조치와 제한이 필요합니다. 이 예제는 기본적인 아이디어만 제공하는 것으로 말 그대로 **`"예시"`**일 뿐 입니다. 
- 실제 사용 환경에서는 실행할 코드의 안전성을 확실하게 보장할 수 없으므로, 외부 코드 실행에 대한 샌드박싱 외에도 추가적인 보안 조치를 고려해야 합니다.

## 샌드박싱의 한계와 주의사항
- **성능 저하**: 샌드박스 환경은 추가적인 계산 리소스를 필요로 할 수 있으며, 이로 인해 애플리케이션의 성능이 저하될 수 있습니다.
- **완벽한 보안이 보장되지 않음**: 샌드박싱은 보안의 한 층을 추가하지만, 모든 종류의 보안 위협으로부터 완벽한 보호를 보장하지는 않습니다. 샌드박스 자체의 취약점이 공격될 수도 있습니다.

샌드박싱은 모든 보안 문제를 해결해주지는 않습니다. 가끔은 어린이가 모래상자 밖으로 나가려고 시도할 수도 있듯이, 샌드박싱도 완벽하지 않습니다. 그래서 샌드박스 기법은 다층적인 보안 접근법의 일부로 사용되어야 합니다. 샌드박싱 외에도, 정기적인 보안 패치 적용, 암호화, 접근 제어, 그리고 사용자 교육 등이 포함된 종합적인 보안 체계가 필요함을 잊지 말아야겠습니다.